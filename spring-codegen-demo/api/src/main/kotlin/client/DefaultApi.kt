/*
 * ALI DEMO API
 *
 * ALI DEMO API
 *
 * API version: 0.1
 * Contact: kirill.terekhov@aliexpress.ru
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package client



import com.fasterxml.jackson.core.JsonFactory
import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import java.io.IOException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import kotlin.reflect.KClass

class DefaultApi(jsonFactory: JsonFactory) {

    @JvmField
    val getAbout: GetAbout
    @JvmField
    val setAbout: SetAbout

    init {
        getAbout = GetAbout(jsonFactory)
        setAbout = SetAbout(jsonFactory)
    }

    class GetAbout(
        private val jsonFactory: JsonFactory
    ) {
        @Target(allowedTargets = [AnnotationTarget.FUNCTION])
        @Retention
        @RequestMapping(method = [RequestMethod.GET], path = ["/about"])
        annotation class Mapping {

        }

        data class Params(

            val deviceOS: String?,

            val deviceId: String?,

            val apiVersion: String?
        )

        fun paramsFrom(request: HttpServletRequest): Params {
            val deviceOS: String? = request.getParameter("deviceOS")
            val deviceId: String? = request.getParameter("deviceId")
            val apiVersion: String? = request.getParameter("apiVersion")
            return Params(
                    deviceOS,
                    deviceId,
                    apiVersion
            )
        }

        @Throws(IOException::class)
        fun respondOk( data: About, response: HttpServletResponse) {
            response.setHeader("X-Result-Name", "About")
            response.setStatus(200)
            response.setContentType("application/json")
            val mapper = ObjectMapper(jsonFactory)
            val json = mapper.writeValueAsString(data)
            val out = response.writer
            out.print(json)
            out.flush()
            response.setContentType("text/plain")
        }
        @Throws(IOException::class)
        fun respondWrongParam(response: HttpServletResponse) {
            response.setHeader("X-Result-Name", "None")
            response.setStatus(400)
        }

    }
    class SetAbout(
        private val jsonFactory: JsonFactory
    ) {
        @Target(allowedTargets = [AnnotationTarget.FUNCTION])
        @Retention
        @RequestMapping(method = [RequestMethod.GET], path = ["/about"])
        annotation class Mapping {

        }

        data class Params(

            val body: About?,

            val deviceOS: String?,

            val deviceId: String?,

            val apiVersion: String?
        )

        fun paramsFrom(request: HttpServletRequest): Params {
            val body: About? = request.getBodyParameter(jsonFactory, About::class)
            val deviceOS: String? = request.getParameter("deviceOS")
            val deviceId: String? = request.getParameter("deviceId")
            val apiVersion: String? = request.getParameter("apiVersion")
            return Params(
                    body,
                    deviceOS,
                    deviceId,
                    apiVersion
            )
        }

        @Throws(IOException::class)
        fun respondOk(response: HttpServletResponse) {
            response.setHeader("X-Result-Name", "None")
            response.setStatus(200)
        }

    }
}

private fun <T: Any> HttpServletRequest.getBodyParameter(jsonFactory: JsonFactory, clazz: KClass<T>): T {
    val mapper = ObjectMapper(jsonFactory)
    val bodyString = this.parameterMap.toList().first().first
    return mapper.readValue(bodyString, clazz.java)
}