/*
 * ALI DEMO API
 * ALI DEMO API
 *
 * Version: 0.1
 * Contact: kirill.terekhov@aliexpress.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
@file:Suppress("KDocUnresolvedReference", "Unused")

package client

import io.ktor.client.request.request
import io.ktor.client.request.accept
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.header
import io.ktor.client.request.parameter
import io.ktor.client.statement.HttpStatement
import io.ktor.client.statement.readText
import io.ktor.client.statement.readBytes
import io.ktor.content.TextContent
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.encodeURLQueryComponent
import org.kodein.di.Kodein
import org.kodein.di.erased.bind
import org.kodein.di.erased.instance
import org.kodein.di.erased.singleton
import kotlinx.serialization.builtins.list
import kotlinx.serialization.builtins.serializer

import client.About


/**
 * Get an info about the company
 * 
 * @param deviceOS (optional)
 * @param deviceId (optional)
 * @param apiVersion (optional)
 * @return About
 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
 */
interface GetAbout {

    sealed class Result : RouteResult {

        data class Ok(override val result: PossibleResult.AnAbout) : Result() {
            val model = result.model
        }
        data class WrongParam(override val result: PossibleResult.None) : Result() {
            val model = result.model
        }

        fun ok() = (this as? Ok)?.result?.model ?: throw ResultNotMatchException(this.result)
        fun wrongParam() = (this as? WrongParam)?.result?.model ?: throw ResultNotMatchException(this.result)
    }

    suspend operator fun invoke(

    ): Result

    class Impl(
        private val dependencies: CodegenDependencies
    ) : GetAbout {

        override suspend fun invoke(

        ): Result {
            val response = dependencies.client.request<HttpStatement> {
                url {
                    encodedPath = "/about"
                }
                method = HttpMethod("GET")

                val deviceOS = dependencies.headersProvider.deviceOS()
                
                if (deviceOS != null) {
                    header("deviceOS", deviceOS)
                } 
                val deviceId = dependencies.headersProvider.deviceId()
                
                if (deviceId != null) {
                    header("deviceId", deviceId)
                } 
                val apiVersion = dependencies.headersProvider.apiVersion()
                
                if (apiVersion != null) {
                    header("apiVersion", apiVersion)
                } 


                accept(ContentType.Application.Json)
            }.execute()

            val caseName = response.headers["X-Result-Name"] ?: throw ResultKeyUndefinedException()

            val responseText = response.readText()
            return when (caseName) {
                "About" -> GetAbout.Result.Ok(PossibleResult.AnAbout.fromString(responseText, dependencies.json))
                "None" -> GetAbout.Result.WrongParam(PossibleResult.None.fromString(responseText, dependencies.json))
                else -> throw UndefinedResultException(responseText)
            }
        }
    }
}

/**
 * Set an info about the company
 * 
 * @param body (optional)
 * @param deviceOS (optional)
 * @param deviceId (optional)
 * @param apiVersion (optional)
 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
 */
interface SetAbout {

    sealed class Result : RouteResult {

        data class Ok(override val result: PossibleResult.None) : Result() {
            val model = result.model
        }

        fun ok() = (this as? Ok)?.result?.model ?: throw ResultNotMatchException(this.result)
    }

    suspend operator fun invoke(
        body: About
    ): Result

    class Impl(
        private val dependencies: CodegenDependencies
    ) : SetAbout {

        override suspend fun invoke(
            body: About
        ): Result {
            val response = dependencies.client.request<HttpStatement> {
                url {
                    encodedPath = "/about"
                }
                method = HttpMethod("PUT")
                this.body = TextContent(dependencies.json.stringify(About.serializer(), body), ContentType.Application.Json)

                val deviceOS = dependencies.headersProvider.deviceOS()
                
                if (deviceOS != null) {
                    header("deviceOS", deviceOS)
                } 
                val deviceId = dependencies.headersProvider.deviceId()
                
                if (deviceId != null) {
                    header("deviceId", deviceId)
                } 
                val apiVersion = dependencies.headersProvider.apiVersion()
                
                if (apiVersion != null) {
                    header("apiVersion", apiVersion)
                } 


                accept(ContentType.Application.Json)
            }.execute()

            val caseName = response.headers["X-Result-Name"] ?: throw ResultKeyUndefinedException()

            val responseText = response.readText()
            return when (caseName) {
                "None" -> SetAbout.Result.Ok(PossibleResult.None.fromString(responseText, dependencies.json))
                else -> throw UndefinedResultException(responseText)
            }
        }
    }
}


val defaultApiModule = Kodein.Module("client.DefaultApi") {
    bind<GetAbout>() with singleton { GetAbout.Impl(instance()) }
    bind<SetAbout>() with singleton { SetAbout.Impl(instance()) }
}